    @staticmethod
    def pickleTrainingSet(train_set):
        """This method pickles a training set so that we don't have to read
        in all the images individaully each time"""

        labels = []
        all_images_np = np.empty((0,100,100,3))
        categories = MyUtils.listdir_nohidden(BASE_DIR 
                + 'data/Train/' + train_set + '/Images/')

        for category in categories:

            images = []
            files = list(MyUtils.listdir_nohidden(BASE_DIR + 'data/Train/' 
                    + train_set  + "/Images/" + category))
    
            for img in files:
                images.append(img)

            print (len(images))

            images_np = np.zeros((len(images), 100, 100, 3))

            for i in range(0, len(images)):
                images_np[i,:,:,:] = cv2.imread(BASE_DIR + 'data/Train/' 
                        + train_set + '/Images/' + category + "/" + images[i])
                if category == MyUtils.WEIRD :
                    labels.append([0,0,1])
                elif category == MyUtils.TWO_EYES :
                    labels.append([0,1,0])
                else:
                    labels.append([1,0,0])

            all_images_np = np.concatenate((all_images_np, images_np),
                    axis = 0)
            labels_np = np.array(labels)
        pickle.dump( all_images_np, 
                open( BASE_DIR + 'data/Train/' + train_set + '/images.p',"wb"))
        pickle.dump( labels_np, 
                open( BASE_DIR + 'data/Train/' + train_set + '/labels.p',"wb"))

        return
